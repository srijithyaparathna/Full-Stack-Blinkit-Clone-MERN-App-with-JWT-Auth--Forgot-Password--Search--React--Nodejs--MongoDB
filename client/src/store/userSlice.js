// Import the necessary function from Redux Toolkit
import { createSlice } from "@reduxjs/toolkit";

// Define the initial state for the user
const initialValue = {
    _id: "", // Unique identifier for the user
    name: "", // User's name
    email: "", // User's email address
    avatar: "", // URL or path to the user's avatar image
    mobile: "", // User's mobile number
    verify_email: "", // Boolean or flag to indicate email verification status
    last_login_date: "", // Last login date of the user
    status: "", // Account status (e.g., active, inactive)
    address_details: [], // Array of addresses associated with the user
    shopping_cart: [], // Array of items in the user's shopping cart
    orderHistory: [], // Array of previous orders made by the user
    role: "", // Role of the user (e.g., admin, customer)
};

// Create the Redux slice for user-related state
const userSlice = createSlice({
    name: 'user', // The name of the slice, used in action types (e.g., "user/setUserDetails")
    initialState: initialValue, // The initial state defined earlier
    reducers: {
        // Reducer to update user details in the state
        setUserDetails: (state, action) => {
            state._id = action.payload?._id; // Update the user's ID
            state.name = action.payload?.name; // Update the user's name
            state.email = action.payload?.email; // Update the user's email
            state.avatar = action.payload?.avatar; // Update the user's avatar
            state.mobile = action.payload?.mobile; // Update the user's mobile number
            state.verify_email = action.payload?.verify_email; // Update the email verification status
            state.last_login_date = action.payload?.last_login_date; // Update the last login date
            state.status = action.payload?.status; // Update the account status
            state.address_details = action.payload?.address_details; // Update the address details
            state.shopping_cart = action.payload?.shopping_cart; // Update the shopping cart items
            state.orderHistory = action.payload?.orderHistory; // Update the order history
            state.role = action.payload?.role; // Update the user's role
        },
        // Reducer to update the user's avatar
        updatedAvatar: (state, action) => {
            state.avatar = action.payload; // Update only the avatar field
        },
        // Reducer to clear all user details (e.g., during logout)
        logout: (state, action) => {
            state._id = ""; // Reset the user's ID
            state.name = ""; // Reset the user's name
            state.email = ""; // Reset the user's email
            state.avatar = ""; // Reset the user's avatar
            state.mobile = ""; // Reset the user's mobile number
            state.verify_email = ""; // Reset the email verification status
            state.last_login_date = ""; // Reset the last login date
            state.status = ""; // Reset the account status
            state.address_details = []; // Clear the address details
            state.shopping_cart = []; // Clear the shopping cart
            state.orderHistory = []; // Clear the order history
            state.role = ""; // Reset the user's role
        },
    },
});

// Export the actions generated by the slice
export const { setUserDetails, logout, updatedAvatar } = userSlice.actions;
// `setUserDetails` is used to update all user details in the state
// `logout` clears all user details
// `updatedAvatar` updates only the avatar field

// Export the reducer to be used in the Redux store
export default userSlice.reducer;

/* 
This code is a Redux slice for managing user-related state in a React application it uses Redux
Toolkit which simplifies state management by providing tools to create reducers actions and handle
immutable state updates seamlessly

1. Purpose of the Code
    - To manage user-related data centrally in the applications Redux store
    - It defines the initial state reducers and actions for managing user data such as user details
        avatar upsates and logout functionality

2. Key Components of the Code
a. Initial State
The initialValue object defines the default structure and data of the user state. It includes:

        _id: Unique identifier for the user.
        name, email, mobile: User's personal information.
        avatar: User's profile image.
        verify_email: Status indicating if the user's email is verified.
        last_login_date: The last time the user logged in.
        status: Account status (e.g., active/inactive).
        address_details: List of user's saved addresses.
        shopping_cart: Items in the user's shopping cart.
        orderHistory: List of user's past orders.
        role: User's role in the application (e.g., admin, customer).
        This state ensures all user-related data is readily accessible in one place.
b. Redux Slice
The createSlice function from Redux Toolkit creates:
        Reducers: Functions that define how the state is updated based on dispatched actions.
        Actions: Functions that trigger the reducers to update the state.

3. Reducer (Logic for state Updates)
a. setUserDetails
    Update all the users details in the Redux store

    Logic:
     Take the payload form the dispached action (Which contains the users update details)
     Assigns the values in payload to the respective fields in the state 



heres how the Redux slice for user management works step by step focusing on how the store
operates and how the data flows without getting into code

Step 1 initializing the Redux Store
    - the Redux store is the central place where the state of the entire application is stored
    - when the application starts the store is initialized with all the slices (e.g,userSlice)
      and their respective initial states
    - The userSlice initializes the user state with default values like "" for string and [] for
      arrays.

Step 2 fetching user Data
    - When a user logs in or when user data is retrieved (e.g , from local storage or an API) the application
        fetches the user information
    
    - this data is passed to the action createor (setUserDetails) which dispatches it to the Redux store

Step 3 Dispatching Actions
    - Dispatching an Action: When user-related events occur(login, logout profile updates) and action is dispatched

    - An action is essentially a message sent to the Redux store describing what needs to change
    for example
        setUserDetails updates all user-related fields in the state
        logout clears all user-related data

Step 4 updating the state via Reducers
    - Once an action is dispatched the corresponding reducer in the slice handles the action
        the reducer is a function that 
            that the currnt state
            modifies it based on the action payload
            returns the update state

            the updated state is stored in the Redux store

Step 5 Accessing the state
    component in the application use the redux hooks or function(like useselector) to access
    the current state from the store

    for example
        a cpmponent can use useSelector to get the currnt user`s name ot role
        this ensures that tht UI update automatically whenever the user state changes


Step 6 Example scenatios 
    Login
    1. user submits login credentials
    2. The application sends an API request to the backend to validate the credentials
    3. if successfull the backend returns user details
    4. These details are dispatched to the store via setUserDetails.
    5. The Redux store updates the user state
    6. Components reading from the store(e.g, userMenus, profile pages) reflect the update data 

Logout

User clicks the "Logout" button.
An action (logout) is dispatched to the store.
The reducer clears all user-related data in the state.
Components reading the user state now display default or logged-out views.


Profile Update
User updates their avatar or personal information.
The application sends the updated data to the backend.
On success, the new data is dispatched to the store (e.g., updatedAvatar or setUserDetails).
The state updates, and the UI reflects the changes.


SUMMATY OF DATA FLOW 
    Store initialization : The store starts with the initial state defined in the slice .
    Action Dispatch      : User events or API responses trigger actions(e.g: setUserDetails)
    Reducer Execution    : The slice`s reducer modifies the state based on the action`s payload
    State Update         : The update state is saved in the store
    State Access         : Components fetch the stae from the store using useSelector or similar methods 




*/